import { Neo4jGraphQL } from '@neo4j/graphql';
import { ApolloServer } from 'apollo-server';
import { config } from 'dotenv';
import fs from 'fs';
import neo4j from 'neo4j-driver';
import path from 'path';
// load contents of .env as environment variables
const result = config();
if (result.error) {
  throw result.error
};
// after init env
import { envVariables as e } from './app';

const schemaGraphql = 'schema.graphql';

if (!fs.existsSync(`src/${schemaGraphql}`)) {
  throw new Error(`can\'t open schemaGraphql: src/${schemaGraphql}`);
};
// load GraphQL type definitions from schema.graphql file
const typeDefs = fs
  .readFileSync(path.join(__dirname, schemaGraphql))
  .toString('utf-8');

// create executable GraphQL schema from GraphQL type definitions,
// using @neo4j/graphql to autogenerate resolvers
const neoSchema = new Neo4jGraphQL({
  typeDefs
});

// create Neo4j driver instance
const driver = neo4j.driver(e.neo4JUri,
  neo4j.auth.basic(e.neo4JUser, e.neo4JPassword)
);

// create ApolloServer instance that will serve GraphQL schema created above
// inject Neo4j driver instance into the context object, which will be passed
// into each (autogenerated) resolver
const server = new ApolloServer({
  context: { driver,  },
  schema: neoSchema.schema,
  introspection: true,
  playground: true,
});

// server.listen(e.serverPort).then(() => console.log(`server listening on port ${e.serverPort}`));
// start ApolloServer
server.listen().then(({ url }) => {
  console.log(`GraphQL server ready at ${url}`);
});
