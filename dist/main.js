"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("@neo4j/graphql");
const apollo_server_1 = require("apollo-server");
const dotenv_1 = require("dotenv");
const fs_1 = __importDefault(require("fs"));
const neo4j_driver_1 = __importDefault(require("neo4j-driver"));
const path_1 = __importDefault(require("path"));
// load contents of .env as environment variables
const result = dotenv_1.config();
if (result.error) {
    throw result.error;
}
;
// after init env
const app_1 = require("./app");
const schemaGraphql = 'schema.graphql';
if (!fs_1.default.existsSync(`src/${schemaGraphql}`)) {
    throw new Error(`can\'t open schemaGraphql: src/${schemaGraphql}`);
}
;
// load GraphQL type definitions from schema.graphql file
const typeDefs = fs_1.default
    .readFileSync(path_1.default.join(__dirname, schemaGraphql))
    .toString('utf-8');
// custom Resolvers
const resolvers = {
    Order: {
        estimatedDelivery: (_obj, _args, _context, _info) => {
            const options = [1, 5, 10, 15, 30, 45];
            const estDate = new Date();
            estDate.setDate(estDate.getDate() + options[Math.floor(Math.random() * options.length)]);
            return estDate;
        }
    }
};
// create executable GraphQL schema from GraphQL type definitions,
// using @neo4j/graphql to autogenerate resolvers
const neoSchema = new graphql_1.Neo4jGraphQL({
    typeDefs,
    config: {
        jwt: {
            secret: app_1.envVariables.jwtSecret
        }
    },
    resolvers,
});
// create Neo4j driver instance
const driver = neo4j_driver_1.default.driver(app_1.envVariables.neo4JUri, neo4j_driver_1.default.auth.basic(app_1.envVariables.neo4JUser, app_1.envVariables.neo4JPassword));
// create ApolloServer instance that will serve GraphQL schema created above
// inject Neo4j driver instance into the context object, which will be passed
// into each (autogenerated) resolver
const server = new apollo_server_1.ApolloServer({
    // the trick for the problem of authentication is not passing here the req
    context: ({ req }) => ({ driver, req }),
    schema: neoSchema.schema,
    introspection: true,
    playground: true
});
// server.listen(e.serverPort).then(() => console.log(`server listening on port ${e.serverPort}`));
// start ApolloServer
server.listen().then(({ url }) => {
    console.log(`GraphQL server ready at ${url}`);
});
//# sourceMappingURL=main.js.map